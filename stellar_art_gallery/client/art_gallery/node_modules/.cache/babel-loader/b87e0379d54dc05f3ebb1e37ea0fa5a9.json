{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/gunstein/koding/stellar_testing/stellar_art_gallery/client/art_gallery/src/pages/Buy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { RoutingContext, pagesMapping } from \"../context/RoutingContext\";\nimport selectedTileContext from \"../context/SelectedTileContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GalleryAppBar from \"../components/GalleryAppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport { createOrder } from \"../services/order\";\nimport { createAccount, getAccountBalance } from \"../services/stellar\";\nimport LoadingButton from \"@material-ui/lab/LoadingButton\";\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: \"relative\"\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3)\n    }\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nconst Buy = () => {\n  _s();\n\n  const {\n    setPage\n  } = useContext(RoutingContext);\n  const {\n    selectedTile\n  } = useContext(selectedTileContext);\n  const [targetAccount, setTargetAccount] = useState(\"\");\n  const [targetMemo, setTargetMemo] = useState(\"\");\n  const [sourceAccountPublicKey, setSourceAccountPublicKey] = useState(\"\");\n  const [sourceAccountSecret, setSourceAccountSecret] = useState(\"\");\n  const [sourceAccountBalance, setSourceAccountBalance] = useState(0);\n  const [orderMode, setOrderMode] = useState(true);\n  const [createAccountMode, setCreateAccountMode] = useState(false);\n  const [payMode, setPayMode] = useState(false);\n  const [spinnerCreateAccount, setSpinnerCreateAccount] = useState(false);\n  const classes = useStyles();\n\n  const handleOrder = () => {\n    createOrder({\n      artid: selectedTile.artid\n    }).then(order_response => {\n      console.log(\"order_response: \", order_response);\n\n      if (order_response.hasOwnProperty(\"data\") && order_response.data.hasOwnProperty(\"account\") && order_response.data.hasOwnProperty(\"memo\")) {\n        setTargetAccount(order_response.data.account);\n        setTargetMemo(order_response.data.memo);\n        setOrderMode(false);\n        setCreateAccountMode(true);\n      }\n    });\n  };\n\n  const handleCreateAccount = () => {\n    setSpinnerCreateAccount(true);\n    createAccount().then(account_response => {\n      setSourceAccountPublicKey(account_response.publickey);\n      setSourceAccountSecret(account_response.secret);\n      handleGetAccountBalance(account_response.publickey);\n      setPayMode(true);\n    });\n    setSpinnerCreateAccount(false);\n  };\n\n  const handleGetAccountBalance = sourceAccountPublicKey => {\n    getAccountBalance(sourceAccountPublicKey).then(account_balance_response => {\n      setSourceAccountBalance(account_balance_response.balance);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GalleryAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: classes.layout,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paper,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: [\"Buy \", selectedTile.title, \" by \", selectedTile.artist]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"target_account\",\n              name: \"targetAccount\",\n              label: \"Target Account\",\n              fullWidth: true,\n              InputProps: {\n                readOnly: true\n              },\n              value: targetAccount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"target_memo\",\n              name: \"targetMemo\",\n              label: \"Target Memo\",\n              fullWidth: true,\n              value: targetMemo,\n              InputProps: {\n                readOnly: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), orderMode ? /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.buttons,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                className: classes.button,\n                onClick: handleOrder,\n                children: \"Order\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this) : null, !orderMode ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"source_account_public_key\",\n                name: \"sourceAccountPublicKey\",\n                label: \"Source Account Public Key\",\n                fullWidth: true,\n                value: sourceAccountPublicKey,\n                InputProps: {\n                  readOnly: true\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"source_account_secret\",\n                name: \"sourceAccountSecret\",\n                label: \"Source Account Secret\",\n                fullWidth: true,\n                value: sourceAccountSecret,\n                InputProps: {\n                  readOnly: true\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"source_account_balance\",\n                name: \"sourceAccountBalance\",\n                label: \"Source Account Balance\",\n                fullWidth: true,\n                value: sourceAccountBalance,\n                InputProps: {\n                  readOnly: true\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this) : null, createAccountMode ? /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.buttons,\n              children: spinnerCreateAccount ? /*#__PURE__*/_jsxDEV(LoadingButton, {\n                pending: true,\n                variant: \"outlined\",\n                children: \"\\\"Create and fund account\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                className: classes.button,\n                onClick: handleCreateAccount,\n                children: \"\\\"Create and fund account\\\"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Buy, \"jgZMSn0N50a4Qk5CjGM4s6VnvvQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = Buy;\nexport default Buy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buy\");","map":{"version":3,"sources":["/home/gunstein/koding/stellar_testing/stellar_art_gallery/client/art_gallery/src/pages/Buy.js"],"names":["React","useState","useEffect","useContext","RoutingContext","pagesMapping","selectedTileContext","makeStyles","Grid","TextField","AppBar","Toolbar","Paper","Typography","GalleryAppBar","Button","createOrder","createAccount","getAccountBalance","LoadingButton","useStyles","theme","appBar","position","layout","width","marginLeft","spacing","marginRight","breakpoints","up","paper","marginTop","marginBottom","padding","buttons","display","justifyContent","button","Buy","setPage","selectedTile","targetAccount","setTargetAccount","targetMemo","setTargetMemo","sourceAccountPublicKey","setSourceAccountPublicKey","sourceAccountSecret","setSourceAccountSecret","sourceAccountBalance","setSourceAccountBalance","orderMode","setOrderMode","createAccountMode","setCreateAccountMode","payMode","setPayMode","spinnerCreateAccount","setSpinnerCreateAccount","classes","handleOrder","artid","then","order_response","console","log","hasOwnProperty","data","account","memo","handleCreateAccount","account_response","publickey","secret","handleGetAccountBalance","account_balance_response","balance","title","artist","readOnly"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { RoutingContext, pagesMapping } from \"../context/RoutingContext\";\nimport selectedTileContext from \"../context/SelectedTileContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GalleryAppBar from \"../components/GalleryAppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport { createOrder } from \"../services/order\";\nimport { createAccount, getAccountBalance } from \"../services/stellar\";\nimport LoadingButton from \"@material-ui/lab/LoadingButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst Buy = () => {\n  const { setPage } = useContext(RoutingContext);\n  const { selectedTile } = useContext(selectedTileContext);\n  const [targetAccount, setTargetAccount] = useState(\"\");\n  const [targetMemo, setTargetMemo] = useState(\"\");\n  const [sourceAccountPublicKey, setSourceAccountPublicKey] = useState(\"\");\n  const [sourceAccountSecret, setSourceAccountSecret] = useState(\"\");\n  const [sourceAccountBalance, setSourceAccountBalance] = useState(0);\n  const [orderMode, setOrderMode] = useState(true);\n  const [createAccountMode, setCreateAccountMode] = useState(false);\n  const [payMode, setPayMode] = useState(false);\n  const [spinnerCreateAccount, setSpinnerCreateAccount] = useState(false);\n\n  const classes = useStyles();\n\n  const handleOrder = () => {\n    createOrder({ artid: selectedTile.artid }).then((order_response) => {\n      console.log(\"order_response: \", order_response);\n      if (\n        order_response.hasOwnProperty(\"data\") &&\n        order_response.data.hasOwnProperty(\"account\") &&\n        order_response.data.hasOwnProperty(\"memo\")\n      ) {\n        setTargetAccount(order_response.data.account);\n        setTargetMemo(order_response.data.memo);\n        setOrderMode(false);\n        setCreateAccountMode(true);\n      }\n    });\n  };\n\n  const handleCreateAccount = () => {\n    setSpinnerCreateAccount(true);\n    createAccount().then((account_response) => {\n      setSourceAccountPublicKey(account_response.publickey);\n      setSourceAccountSecret(account_response.secret);\n      handleGetAccountBalance(account_response.publickey);\n      setPayMode(true);\n    });\n    setSpinnerCreateAccount(false);\n  };\n\n  const handleGetAccountBalance = (sourceAccountPublicKey) => {\n    getAccountBalance(sourceAccountPublicKey).then(\n      (account_balance_response) => {\n        setSourceAccountBalance(account_balance_response.balance);\n      }\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <GalleryAppBar></GalleryAppBar>\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography variant=\"h6\" gutterBottom>\n            Buy {selectedTile.title} by {selectedTile.artist}\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField\n                id=\"target_account\"\n                name=\"targetAccount\"\n                label=\"Target Account\"\n                fullWidth\n                InputProps={{\n                  readOnly: true,\n                }}\n                value={targetAccount}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                id=\"target_memo\"\n                name=\"targetMemo\"\n                label=\"Target Memo\"\n                fullWidth\n                value={targetMemo}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Grid>\n            {orderMode ? (\n              <Grid item xs={12}>\n                <div className={classes.buttons}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    onClick={handleOrder}\n                  >\n                    Order\n                  </Button>\n                </div>\n              </Grid>\n            ) : null}\n            {!orderMode ? (\n              <React.Fragment>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"source_account_public_key\"\n                    name=\"sourceAccountPublicKey\"\n                    label=\"Source Account Public Key\"\n                    fullWidth\n                    value={sourceAccountPublicKey}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"source_account_secret\"\n                    name=\"sourceAccountSecret\"\n                    label=\"Source Account Secret\"\n                    fullWidth\n                    value={sourceAccountSecret}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"source_account_balance\"\n                    name=\"sourceAccountBalance\"\n                    label=\"Source Account Balance\"\n                    fullWidth\n                    value={sourceAccountBalance}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n              </React.Fragment>\n            ) : null}\n            {createAccountMode ? (\n              <Grid item xs={12}>\n                <div className={classes.buttons}>\n                  {spinnerCreateAccount ? (\n                    <LoadingButton pending variant=\"outlined\">\n                      \"Create and fund account\"\n                    </LoadingButton>\n                  ) : (\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.button}\n                      onClick={handleCreateAccount}\n                    >\n                      \"Create and fund account\"\n                    </Button>\n                  )}\n                </div>\n              </Grid>\n            ) : null}\n          </Grid>\n        </Paper>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport default Buy;\n"]},"metadata":{},"sourceType":"module"}