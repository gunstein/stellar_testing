{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/gunstein/koding/stellar_testing/stellar_art_gallery/client/art_gallery/src/components/OrderForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { createOrder } from \"../services/order\";\nexport default function FormDialog({\n  handleCloseToParent,\n  tile\n}) {\n  _s();\n\n  //const [open, setOpen] = React.useState(false);\n  const [emailInput, setEmailInput] = useState('');\n  const [payMode, setPayMode] = useState(false);\n\n  const handleClose = () => {\n    handleCloseToParent();\n  };\n\n  const handleBuy = () => {\n    createOrder({\n      email: emailInput,\n      artid: tile.artid\n    }).then(order_response => {\n      console.log(\"order_response: \", order_response);\n\n      if (order_response.hasOwnProperty('account') && order_response.hasOwnProperty('memo')) {}\n    }); //handleCloseToParent();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: true,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      children: [\"Buy \", tile.title, \" by \", tile.artist]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: \"Please enter email and press buy. Then paymentinfo will show up. Download info will be sent per email when payment is received.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        autoFocus: true,\n        margin: \"dense\",\n        id: \"email\",\n        label: \"Email Address\",\n        type: \"email\",\n        fullWidth: true,\n        onChange: event => setEmailInput(event.target.value),\n        value: emailInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), payMode ? /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"target-account\",\n        label: \"Target account\",\n        InputProps: {\n          readOnly: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        color: \"primary\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleBuy,\n        color: \"primary\",\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormDialog, \"HH2z+fchWTEpQjsEh4Jr0rHly+4=\");\n\n_c = FormDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormDialog\");","map":{"version":3,"sources":["/home/gunstein/koding/stellar_testing/stellar_art_gallery/client/art_gallery/src/components/OrderForm.js"],"names":["React","useState","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","createOrder","FormDialog","handleCloseToParent","tile","emailInput","setEmailInput","payMode","setPayMode","handleClose","handleBuy","email","artid","then","order_response","console","log","hasOwnProperty","title","artist","event","target","value","readOnly"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,CAApB,EAAmD;AAAA;;AAChE;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMgB,WAAW,GAAG,MAAM;AACxBN,IAAAA,mBAAmB;AACpB,GAFD;;AAIA,QAAMO,SAAS,GAAG,MAAM;AACtBT,IAAAA,WAAW,CAAC;AAACU,MAAAA,KAAK,EAACN,UAAP;AAAmBO,MAAAA,KAAK,EAACR,IAAI,CAACQ;AAA9B,KAAD,CAAX,CACCC,IADD,CACMC,cAAc,IAAI;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,cAAhC;;AACA,UAAGA,cAAc,CAACG,cAAf,CAA8B,SAA9B,KAA4CH,cAAc,CAACG,cAAf,CAA8B,MAA9B,CAA/C,EACA,CACC;AACF,KAND,EADsB,CAQtB;AACD,GATD;;AAWA,sBACE,QAAC,MAAD;AACE,IAAA,IAAI,EAAE,IADR;AAEE,IAAA,OAAO,EAAER,WAFX;AAGE,uBAAgB,mBAHlB;AAAA,4BAKE,QAAC,WAAD;AAAa,MAAA,EAAE,EAAC,mBAAhB;AAAA,yBACOL,IAAI,CAACc,KADZ,UACuBd,IAAI,CAACe,MAD5B;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAQE,QAAC,aAAD;AAAA,8BACE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,MAAM,EAAC,OAFT;AAGE,QAAA,EAAE,EAAC,OAHL;AAIE,QAAA,KAAK,EAAC,eAJR;AAKE,QAAA,IAAI,EAAC,OALP;AAME,QAAA,SAAS,MANX;AAOE,QAAA,QAAQ,EAAEC,KAAK,IAAId,aAAa,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAPlC;AAQE,QAAA,KAAK,EAAEjB;AART;AAAA;AAAA;AAAA;AAAA,cAJF,EAcGE,OAAO,gBACN,QAAC,SAAD;AACA,QAAA,EAAE,EAAC,gBADH;AAEA,QAAA,KAAK,EAAC,gBAFN;AAGA,QAAA,UAAU,EAAE;AACVgB,UAAAA,QAAQ,EAAE;AADA;AAHZ;AAAA;AAAA;AAAA;AAAA,cADM,GAQJ,IAtBN;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,eAgCE,QAAC,aAAD;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEd,WAAjB;AAA8B,QAAA,KAAK,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEC,SAAjB;AAA4B,QAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAhCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2CD;;GA/DuBR,U;;KAAAA,U","sourcesContent":["import React, { useState} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { createOrder } from \"../services/order\";\n\nexport default function FormDialog({ handleCloseToParent, tile }) {\n  //const [open, setOpen] = React.useState(false);\n  const [emailInput, setEmailInput] = useState('');\n  const [payMode, setPayMode] = useState(false);\n\n  const handleClose = () => {\n    handleCloseToParent();\n  };\n\n  const handleBuy = () => {\n    createOrder({email:emailInput, artid:tile.artid})\n    .then(order_response => {\n      console.log(\"order_response: \", order_response)\n      if(order_response.hasOwnProperty('account') && order_response.hasOwnProperty('memo'))\n      {\n      }\n    })\n    //handleCloseToParent();\n  };\n\n  return (\n    <Dialog\n      open={true}\n      onClose={handleClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">\n        Buy {tile.title} by {tile.artist}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Please enter email and press buy. Then paymentinfo will show up. Download info will be sent per email when payment is received.\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"email\"\n          label=\"Email Address\"\n          type=\"email\"\n          fullWidth\n          onChange={event => setEmailInput(event.target.value)} \n          value={emailInput}\n        />\n        {payMode ? (\n          <TextField\n          id=\"target-account\"\n          label=\"Target account\"\n          InputProps={{\n            readOnly: true,\n          }}\n        />\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleBuy} color=\"primary\">\n          Buy\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}