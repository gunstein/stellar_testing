{"ast":null,"code":"import StellarSdk from \"stellar-sdk\";\nexport async function createAccount() {\n  const pair = StellarSdk.Keypair.random();\n\n  try {\n    const response = await fetch(`https://friendbot.stellar.org?addr=${encodeURIComponent(pair.publicKey())}`);\n    const responseJSON = await response.json();\n    console.log(\"SUCCESS! You have a new account :)\\n\", responseJSON);\n    return pair;\n  } catch (e) {\n    console.error(\"ERROR!\", e);\n  }\n}\nexport async function getAccountBalance(account) {\n  const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n  const account_response = await server.loadAccount(account);\n  return {\n    balance: account_response.balances[0].balance\n  };\n}\nexport async function sendPayment(sourceKeyPair, targetAccount, memo, amount) {\n  console.log(\"sendPayment: targetAccount : \", targetAccount);\n  console.log(\"sendPayment: memo : \", memo);\n  console.log(\"sendPayment: amount : \", amount); //Mostly copied from here https://developers.stellar.org/docs/tutorials/send-and-receive-payments/\n\n  var StellarSdk = require(\"stellar-sdk\");\n\n  var server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\"); //var destinationId = \"GA2C5RFPE6GCKMY3US5PAB6UZLKIGSPIUKSLRB6Q723BM2OARMDUYEJ5\";\n  // Transaction will hold a built transaction we can resubmit if the result is unknown.\n\n  var transaction; // First, check to make sure that the destination account exists.\n  // You could skip this, but if the account does not exist, you will be charged\n  // the transaction fee when the transaction fails.\n\n  server.loadAccount(targetAccount) // If the account is not found, surface a nicer error message for logging.\n  .catch(function (error) {\n    if (error instanceof StellarSdk.NotFoundError) {\n      throw new Error(\"The destination account does not exist!\");\n    } else return error;\n  }) // If there was no error, load up-to-date information on your account.\n  .then(function () {\n    return server.loadAccount(sourceKeyPair.publicKey());\n  }).then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET\n    }).addOperation(StellarSdk.Operation.payment({\n      destination: targetAccount,\n      // Because Stellar allows transaction in many currencies, you must\n      // specify the asset type. The special \"native\" asset represents Lumens.\n      asset: StellarSdk.Asset.native(),\n      //amount: amount,\n      amount: \"1\"\n    })) // A memo allows you to add your own metadata to a transaction. It's\n    // optional and does not affect how Stellar treats the transaction.\n    .addMemo(StellarSdk.Memo.text(memo)) // Wait a maximum of three minutes for the transaction\n    .setTimeout(180).build(); // Sign the transaction to prove you are actually the person sending it.\n\n    transaction.sign(sourceKeyPair); // And finally, send it off to Stellar!\n\n    return server.submitTransaction(transaction);\n  }).then(function (result) {\n    console.log(\"Success! Results:\", result);\n    return result;\n  }).catch(function (error) {\n    console.error(\"Something went wrong!\", error); // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });\n}","map":{"version":3,"sources":["/home/gunstein/koding/stellar_testing/stellar_art_gallery/client/art_gallery/src/services/stellar.js"],"names":["StellarSdk","createAccount","pair","Keypair","random","response","fetch","encodeURIComponent","publicKey","responseJSON","json","console","log","e","error","getAccountBalance","account","server","Server","account_response","loadAccount","balance","balances","sendPayment","sourceKeyPair","targetAccount","memo","amount","require","transaction","catch","NotFoundError","Error","then","sourceAccount","TransactionBuilder","fee","BASE_FEE","networkPassphrase","Networks","TESTNET","addOperation","Operation","payment","destination","asset","Asset","native","addMemo","Memo","text","setTimeout","build","sign","submitTransaction","result"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AAEA,OAAO,eAAeC,aAAf,GAA+B;AACpC,QAAMC,IAAI,GAAGF,UAAU,CAACG,OAAX,CAAmBC,MAAnB,EAAb;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCC,kBAAkB,CACtDL,IAAI,CAACM,SAAL,EADsD,CAEtD,EAHwB,CAA5B;AAKA,UAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDH,YAApD;AACA,WAAOP,IAAP;AACD,GATD,CASE,OAAOW,CAAP,EAAU;AACVF,IAAAA,OAAO,CAACG,KAAR,CAAc,QAAd,EAAwBD,CAAxB;AACD;AACF;AAED,OAAO,eAAeE,iBAAf,CAAiCC,OAAjC,EAA0C;AAC/C,QAAMC,MAAM,GAAG,IAAIjB,UAAU,CAACkB,MAAf,CAAsB,qCAAtB,CAAf;AACA,QAAMC,gBAAgB,GAAG,MAAMF,MAAM,CAACG,WAAP,CAAmBJ,OAAnB,CAA/B;AACA,SAAO;AAAEK,IAAAA,OAAO,EAAEF,gBAAgB,CAACG,QAAjB,CAA0B,CAA1B,EAA6BD;AAAxC,GAAP;AACD;AAED,OAAO,eAAeE,WAAf,CAA2BC,aAA3B,EAA0CC,aAA1C,EAAyDC,IAAzD,EAA+DC,MAA/D,EAAuE;AAC5EhB,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6Ca,aAA7C;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCc,IAApC;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCe,MAAtC,EAH4E,CAI5E;;AACA,MAAI3B,UAAU,GAAG4B,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAIX,MAAM,GAAG,IAAIjB,UAAU,CAACkB,MAAf,CAAsB,qCAAtB,CAAb,CAN4E,CAQ5E;AACA;;AACA,MAAIW,WAAJ,CAV4E,CAY5E;AACA;AACA;;AACAZ,EAAAA,MAAM,CACHG,WADH,CACeK,aADf,EAEE;AAFF,GAGGK,KAHH,CAGS,UAAUhB,KAAV,EAAiB;AACtB,QAAIA,KAAK,YAAYd,UAAU,CAAC+B,aAAhC,EAA+C;AAC7C,YAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD,KAFD,MAEO,OAAOlB,KAAP;AACR,GAPH,EAQE;AARF,GASGmB,IATH,CASQ,YAAY;AAChB,WAAOhB,MAAM,CAACG,WAAP,CAAmBI,aAAa,CAAChB,SAAd,EAAnB,CAAP;AACD,GAXH,EAYGyB,IAZH,CAYQ,UAAUC,aAAV,EAAyB;AAC7B;AACAL,IAAAA,WAAW,GAAG,IAAI7B,UAAU,CAACmC,kBAAf,CAAkCD,aAAlC,EAAiD;AAC7DE,MAAAA,GAAG,EAAEpC,UAAU,CAACqC,QAD6C;AAE7DC,MAAAA,iBAAiB,EAAEtC,UAAU,CAACuC,QAAX,CAAoBC;AAFsB,KAAjD,EAIXC,YAJW,CAKVzC,UAAU,CAAC0C,SAAX,CAAqBC,OAArB,CAA6B;AAC3BC,MAAAA,WAAW,EAAEnB,aADc;AAE3B;AACA;AACAoB,MAAAA,KAAK,EAAE7C,UAAU,CAAC8C,KAAX,CAAiBC,MAAjB,EAJoB;AAK3B;AACApB,MAAAA,MAAM,EAAE;AANmB,KAA7B,CALU,EAcZ;AACA;AAfY,KAgBXqB,OAhBW,CAgBHhD,UAAU,CAACiD,IAAX,CAAgBC,IAAhB,CAAqBxB,IAArB,CAhBG,EAiBZ;AAjBY,KAkBXyB,UAlBW,CAkBA,GAlBA,EAmBXC,KAnBW,EAAd,CAF6B,CAsB7B;;AACAvB,IAAAA,WAAW,CAACwB,IAAZ,CAAiB7B,aAAjB,EAvB6B,CAwB7B;;AACA,WAAOP,MAAM,CAACqC,iBAAP,CAAyBzB,WAAzB,CAAP;AACD,GAtCH,EAuCGI,IAvCH,CAuCQ,UAAUsB,MAAV,EAAkB;AACtB5C,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC2C,MAAjC;AACA,WAAOA,MAAP;AACD,GA1CH,EA2CGzB,KA3CH,CA2CS,UAAUhB,KAAV,EAAiB;AACtBH,IAAAA,OAAO,CAACG,KAAR,CAAc,uBAAd,EAAuCA,KAAvC,EADsB,CAEtB;AACA;AACA;AACD,GAhDH;AAiDD","sourcesContent":["import StellarSdk from \"stellar-sdk\";\n\nexport async function createAccount() {\n  const pair = StellarSdk.Keypair.random();\n  try {\n    const response = await fetch(\n      `https://friendbot.stellar.org?addr=${encodeURIComponent(\n        pair.publicKey()\n      )}`\n    );\n    const responseJSON = await response.json();\n    console.log(\"SUCCESS! You have a new account :)\\n\", responseJSON);\n    return pair;\n  } catch (e) {\n    console.error(\"ERROR!\", e);\n  }\n}\n\nexport async function getAccountBalance(account) {\n  const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n  const account_response = await server.loadAccount(account);\n  return { balance: account_response.balances[0].balance };\n}\n\nexport async function sendPayment(sourceKeyPair, targetAccount, memo, amount) {\n  console.log(\"sendPayment: targetAccount : \", targetAccount);\n  console.log(\"sendPayment: memo : \", memo);\n  console.log(\"sendPayment: amount : \", amount);\n  //Mostly copied from here https://developers.stellar.org/docs/tutorials/send-and-receive-payments/\n  var StellarSdk = require(\"stellar-sdk\");\n  var server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\n  //var destinationId = \"GA2C5RFPE6GCKMY3US5PAB6UZLKIGSPIUKSLRB6Q723BM2OARMDUYEJ5\";\n  // Transaction will hold a built transaction we can resubmit if the result is unknown.\n  var transaction;\n\n  // First, check to make sure that the destination account exists.\n  // You could skip this, but if the account does not exist, you will be charged\n  // the transaction fee when the transaction fails.\n  server\n    .loadAccount(targetAccount)\n    // If the account is not found, surface a nicer error message for logging.\n    .catch(function (error) {\n      if (error instanceof StellarSdk.NotFoundError) {\n        throw new Error(\"The destination account does not exist!\");\n      } else return error;\n    })\n    // If there was no error, load up-to-date information on your account.\n    .then(function () {\n      return server.loadAccount(sourceKeyPair.publicKey());\n    })\n    .then(function (sourceAccount) {\n      // Start building the transaction.\n      transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n        fee: StellarSdk.BASE_FEE,\n        networkPassphrase: StellarSdk.Networks.TESTNET,\n      })\n        .addOperation(\n          StellarSdk.Operation.payment({\n            destination: targetAccount,\n            // Because Stellar allows transaction in many currencies, you must\n            // specify the asset type. The special \"native\" asset represents Lumens.\n            asset: StellarSdk.Asset.native(),\n            //amount: amount,\n            amount: \"1\",\n          })\n        )\n        // A memo allows you to add your own metadata to a transaction. It's\n        // optional and does not affect how Stellar treats the transaction.\n        .addMemo(StellarSdk.Memo.text(memo))\n        // Wait a maximum of three minutes for the transaction\n        .setTimeout(180)\n        .build();\n      // Sign the transaction to prove you are actually the person sending it.\n      transaction.sign(sourceKeyPair);\n      // And finally, send it off to Stellar!\n      return server.submitTransaction(transaction);\n    })\n    .then(function (result) {\n      console.log(\"Success! Results:\", result);\n      return result;\n    })\n    .catch(function (error) {\n      console.error(\"Something went wrong!\", error);\n      // If the result is unknown (no response body, timeout etc.) we simply resubmit\n      // already built transaction:\n      // server.submitTransaction(transaction);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}